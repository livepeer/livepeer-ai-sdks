/**
 * Livepeer AI Runner
 * An application to run AI pipelines
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPError from '../model/HTTPError';
import HTTPValidationError from '../model/HTTPValidationError';
import ImageResponse from '../model/ImageResponse';
import TextToImageParams from '../model/TextToImageParams';
import VideoResponse from '../model/VideoResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imageToImage operation.
     * @callback module:api/DefaultApi~imageToImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Image To Image
     * @param {String} prompt 
     * @param {File} image 
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {Number} [strength = 0.8)] 
     * @param {Number} [guidanceScale = 7.5)] 
     * @param {Number} [imageGuidanceScale = 1.5)] 
     * @param {String} [negativePrompt = '')] 
     * @param {Boolean} [safetyCheck = true)] 
     * @param {Number} [seed] 
     * @param {Number} [numImagesPerPrompt = 1)] 
     * @param {module:api/DefaultApi~imageToImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageResponse}
     */
    imageToImage(prompt, image, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling imageToImage");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling imageToImage");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling imageToImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'prompt': prompt,
        'image': image,
        'model_id': modelId,
        'strength': opts['strength'],
        'guidance_scale': opts['guidanceScale'],
        'image_guidance_scale': opts['imageGuidanceScale'],
        'negative_prompt': opts['negativePrompt'],
        'safety_check': opts['safetyCheck'],
        'seed': opts['seed'],
        'num_images_per_prompt': opts['numImagesPerPrompt']
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImageResponse;
      return this.apiClient.callApi(
        '/image-to-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageToVideo operation.
     * @callback module:api/DefaultApi~imageToVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Image To Video
     * @param {File} image 
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {Number} [height = 576)] 
     * @param {Number} [width = 1024)] 
     * @param {Number} [fps = 6)] 
     * @param {Number} [motionBucketId = 127)] 
     * @param {Number} [noiseAugStrength = 0.02)] 
     * @param {Number} [seed] 
     * @param {Boolean} [safetyCheck = true)] 
     * @param {module:api/DefaultApi~imageToVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoResponse}
     */
    imageToVideo(image, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling imageToVideo");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling imageToVideo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'model_id': modelId,
        'height': opts['height'],
        'width': opts['width'],
        'fps': opts['fps'],
        'motion_bucket_id': opts['motionBucketId'],
        'noise_aug_strength': opts['noiseAugStrength'],
        'seed': opts['seed'],
        'safety_check': opts['safetyCheck']
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoResponse;
      return this.apiClient.callApi(
        '/image-to-video', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textToImage operation.
     * @callback module:api/DefaultApi~textToImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text To Image
     * @param {module:model/TextToImageParams} textToImageParams 
     * @param {module:api/DefaultApi~textToImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageResponse}
     */
    textToImage(textToImageParams, callback) {
      let postBody = textToImageParams;
      // verify the required parameter 'textToImageParams' is set
      if (textToImageParams === undefined || textToImageParams === null) {
        throw new Error("Missing the required parameter 'textToImageParams' when calling textToImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageResponse;
      return this.apiClient.callApi(
        '/text-to-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upscale operation.
     * @callback module:api/DefaultApi~upscaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upscale
     * @param {String} prompt 
     * @param {File} image 
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [safetyCheck = true)] 
     * @param {Number} [seed] 
     * @param {module:api/DefaultApi~upscaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageResponse}
     */
    upscale(prompt, image, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling upscale");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling upscale");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling upscale");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'prompt': prompt,
        'image': image,
        'model_id': modelId,
        'safety_check': opts['safetyCheck'],
        'seed': opts['seed']
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImageResponse;
      return this.apiClient.callApi(
        '/upscale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
