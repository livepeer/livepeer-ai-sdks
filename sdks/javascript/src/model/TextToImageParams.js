/**
 * Livepeer AI Runner
 * An application to run AI pipelines
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextToImageParams model module.
 * @module model/TextToImageParams
 * @version 0.1.0
 */
class TextToImageParams {
    /**
     * Constructs a new <code>TextToImageParams</code>.
     * @alias module:model/TextToImageParams
     * @param modelId {String} 
     * @param prompt {String} 
     */
    constructor(modelId, prompt) { 
        
        TextToImageParams.initialize(this, modelId, prompt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId, prompt) { 
        obj['model_id'] = modelId || '';
        obj['prompt'] = prompt;
    }

    /**
     * Constructs a <code>TextToImageParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextToImageParams} obj Optional instance to populate.
     * @return {module:model/TextToImageParams} The populated <code>TextToImageParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextToImageParams();

            if (data.hasOwnProperty('model_id')) {
                obj['model_id'] = ApiClient.convertToType(data['model_id'], 'String');
            }
            if (data.hasOwnProperty('prompt')) {
                obj['prompt'] = ApiClient.convertToType(data['prompt'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('guidance_scale')) {
                obj['guidance_scale'] = ApiClient.convertToType(data['guidance_scale'], 'Number');
            }
            if (data.hasOwnProperty('negative_prompt')) {
                obj['negative_prompt'] = ApiClient.convertToType(data['negative_prompt'], 'String');
            }
            if (data.hasOwnProperty('safety_check')) {
                obj['safety_check'] = ApiClient.convertToType(data['safety_check'], 'Boolean');
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
            if (data.hasOwnProperty('num_inference_steps')) {
                obj['num_inference_steps'] = ApiClient.convertToType(data['num_inference_steps'], 'Number');
            }
            if (data.hasOwnProperty('num_images_per_prompt')) {
                obj['num_images_per_prompt'] = ApiClient.convertToType(data['num_images_per_prompt'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextToImageParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextToImageParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TextToImageParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['model_id'] && !(typeof data['model_id'] === 'string' || data['model_id'] instanceof String)) {
            throw new Error("Expected the field `model_id` to be a primitive type in the JSON string but got " + data['model_id']);
        }
        // ensure the json data is a string
        if (data['prompt'] && !(typeof data['prompt'] === 'string' || data['prompt'] instanceof String)) {
            throw new Error("Expected the field `prompt` to be a primitive type in the JSON string but got " + data['prompt']);
        }
        // ensure the json data is a string
        if (data['negative_prompt'] && !(typeof data['negative_prompt'] === 'string' || data['negative_prompt'] instanceof String)) {
            throw new Error("Expected the field `negative_prompt` to be a primitive type in the JSON string but got " + data['negative_prompt']);
        }

        return true;
    }


}

TextToImageParams.RequiredProperties = ["model_id", "prompt"];

/**
 * @member {String} model_id
 * @default ''
 */
TextToImageParams.prototype['model_id'] = '';

/**
 * @member {String} prompt
 */
TextToImageParams.prototype['prompt'] = undefined;

/**
 * @member {Number} height
 */
TextToImageParams.prototype['height'] = undefined;

/**
 * @member {Number} width
 */
TextToImageParams.prototype['width'] = undefined;

/**
 * @member {Number} guidance_scale
 * @default 7.5
 */
TextToImageParams.prototype['guidance_scale'] = 7.5;

/**
 * @member {String} negative_prompt
 * @default ''
 */
TextToImageParams.prototype['negative_prompt'] = '';

/**
 * @member {Boolean} safety_check
 * @default true
 */
TextToImageParams.prototype['safety_check'] = true;

/**
 * @member {Number} seed
 */
TextToImageParams.prototype['seed'] = undefined;

/**
 * @member {Number} num_inference_steps
 * @default 50
 */
TextToImageParams.prototype['num_inference_steps'] = 50;

/**
 * @member {Number} num_images_per_prompt
 * @default 1
 */
TextToImageParams.prototype['num_images_per_prompt'] = 1;






export default TextToImageParams;

