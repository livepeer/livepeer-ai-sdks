# coding: utf-8

"""
    Livepeer AI Runner

    An application to run AI pipelines

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictBytes, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from livepeer_ai_typed.models.image_response import ImageResponse
from livepeer_ai_typed.models.text_to_image_params import TextToImageParams
from livepeer_ai_typed.models.video_response import VideoResponse

from livepeer_ai_typed.api_client import ApiClient
from livepeer_ai_typed.api_response import ApiResponse
from livepeer_ai_typed.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def image_to_image(self, prompt : StrictStr, image : Union[StrictBytes, StrictStr], model_id : StrictStr, strength : Optional[Union[StrictFloat, StrictInt]] = None, guidance_scale : Optional[Union[StrictFloat, StrictInt]] = None, negative_prompt : Optional[StrictStr] = None, seed : Optional[StrictInt] = None, num_images_per_prompt : Optional[StrictInt] = None, **kwargs) -> ImageResponse:  # noqa: E501
        """Image To Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_to_image(prompt, image, model_id, strength, guidance_scale, negative_prompt, seed, num_images_per_prompt, async_req=True)
        >>> result = thread.get()

        :param prompt: (required)
        :type prompt: str
        :param image: (required)
        :type image: bytearray
        :param model_id: (required)
        :type model_id: str
        :param strength:
        :type strength: float
        :param guidance_scale:
        :type guidance_scale: float
        :param negative_prompt:
        :type negative_prompt: str
        :param seed:
        :type seed: int
        :param num_images_per_prompt:
        :type num_images_per_prompt: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the image_to_image_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.image_to_image_with_http_info(prompt, image, model_id, strength, guidance_scale, negative_prompt, seed, num_images_per_prompt, **kwargs)  # noqa: E501

    @validate_arguments
    def image_to_image_with_http_info(self, prompt : StrictStr, image : Union[StrictBytes, StrictStr], model_id : StrictStr, strength : Optional[Union[StrictFloat, StrictInt]] = None, guidance_scale : Optional[Union[StrictFloat, StrictInt]] = None, negative_prompt : Optional[StrictStr] = None, seed : Optional[StrictInt] = None, num_images_per_prompt : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Image To Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_to_image_with_http_info(prompt, image, model_id, strength, guidance_scale, negative_prompt, seed, num_images_per_prompt, async_req=True)
        >>> result = thread.get()

        :param prompt: (required)
        :type prompt: str
        :param image: (required)
        :type image: bytearray
        :param model_id: (required)
        :type model_id: str
        :param strength:
        :type strength: float
        :param guidance_scale:
        :type guidance_scale: float
        :param negative_prompt:
        :type negative_prompt: str
        :param seed:
        :type seed: int
        :param num_images_per_prompt:
        :type num_images_per_prompt: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'prompt',
            'image',
            'model_id',
            'strength',
            'guidance_scale',
            'negative_prompt',
            'seed',
            'num_images_per_prompt'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_to_image" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['prompt'] is not None:
            _form_params.append(('prompt', _params['prompt']))

        if _params['image'] is not None:
            _files['image'] = _params['image']

        if _params['model_id'] is not None:
            _form_params.append(('model_id', _params['model_id']))

        if _params['strength'] is not None:
            _form_params.append(('strength', _params['strength']))

        if _params['guidance_scale'] is not None:
            _form_params.append(('guidance_scale', _params['guidance_scale']))

        if _params['negative_prompt'] is not None:
            _form_params.append(('negative_prompt', _params['negative_prompt']))

        if _params['seed'] is not None:
            _form_params.append(('seed', _params['seed']))

        if _params['num_images_per_prompt'] is not None:
            _form_params.append(('num_images_per_prompt', _params['num_images_per_prompt']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "ImageResponse",
            '400': "HTTPError",
            '500': "HTTPError",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/image-to-image', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def image_to_video(self, image : Union[StrictBytes, StrictStr], model_id : StrictStr, height : Optional[StrictInt] = None, width : Optional[StrictInt] = None, fps : Optional[StrictInt] = None, motion_bucket_id : Optional[StrictInt] = None, noise_aug_strength : Optional[Union[StrictFloat, StrictInt]] = None, seed : Optional[StrictInt] = None, **kwargs) -> VideoResponse:  # noqa: E501
        """Image To Video  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_to_video(image, model_id, height, width, fps, motion_bucket_id, noise_aug_strength, seed, async_req=True)
        >>> result = thread.get()

        :param image: (required)
        :type image: bytearray
        :param model_id: (required)
        :type model_id: str
        :param height:
        :type height: int
        :param width:
        :type width: int
        :param fps:
        :type fps: int
        :param motion_bucket_id:
        :type motion_bucket_id: int
        :param noise_aug_strength:
        :type noise_aug_strength: float
        :param seed:
        :type seed: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VideoResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the image_to_video_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.image_to_video_with_http_info(image, model_id, height, width, fps, motion_bucket_id, noise_aug_strength, seed, **kwargs)  # noqa: E501

    @validate_arguments
    def image_to_video_with_http_info(self, image : Union[StrictBytes, StrictStr], model_id : StrictStr, height : Optional[StrictInt] = None, width : Optional[StrictInt] = None, fps : Optional[StrictInt] = None, motion_bucket_id : Optional[StrictInt] = None, noise_aug_strength : Optional[Union[StrictFloat, StrictInt]] = None, seed : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Image To Video  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_to_video_with_http_info(image, model_id, height, width, fps, motion_bucket_id, noise_aug_strength, seed, async_req=True)
        >>> result = thread.get()

        :param image: (required)
        :type image: bytearray
        :param model_id: (required)
        :type model_id: str
        :param height:
        :type height: int
        :param width:
        :type width: int
        :param fps:
        :type fps: int
        :param motion_bucket_id:
        :type motion_bucket_id: int
        :param noise_aug_strength:
        :type noise_aug_strength: float
        :param seed:
        :type seed: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VideoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'image',
            'model_id',
            'height',
            'width',
            'fps',
            'motion_bucket_id',
            'noise_aug_strength',
            'seed'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_to_video" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['image'] is not None:
            _files['image'] = _params['image']

        if _params['model_id'] is not None:
            _form_params.append(('model_id', _params['model_id']))

        if _params['height'] is not None:
            _form_params.append(('height', _params['height']))

        if _params['width'] is not None:
            _form_params.append(('width', _params['width']))

        if _params['fps'] is not None:
            _form_params.append(('fps', _params['fps']))

        if _params['motion_bucket_id'] is not None:
            _form_params.append(('motion_bucket_id', _params['motion_bucket_id']))

        if _params['noise_aug_strength'] is not None:
            _form_params.append(('noise_aug_strength', _params['noise_aug_strength']))

        if _params['seed'] is not None:
            _form_params.append(('seed', _params['seed']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "VideoResponse",
            '400': "HTTPError",
            '500': "HTTPError",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/image-to-video', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def text_to_image(self, text_to_image_params : TextToImageParams, **kwargs) -> ImageResponse:  # noqa: E501
        """Text To Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.text_to_image(text_to_image_params, async_req=True)
        >>> result = thread.get()

        :param text_to_image_params: (required)
        :type text_to_image_params: TextToImageParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the text_to_image_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.text_to_image_with_http_info(text_to_image_params, **kwargs)  # noqa: E501

    @validate_arguments
    def text_to_image_with_http_info(self, text_to_image_params : TextToImageParams, **kwargs) -> ApiResponse:  # noqa: E501
        """Text To Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.text_to_image_with_http_info(text_to_image_params, async_req=True)
        >>> result = thread.get()

        :param text_to_image_params: (required)
        :type text_to_image_params: TextToImageParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'text_to_image_params'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_to_image" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['text_to_image_params'] is not None:
            _body_params = _params['text_to_image_params']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "ImageResponse",
            '400': "HTTPError",
            '500': "HTTPError",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/text-to-image', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
