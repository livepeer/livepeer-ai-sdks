# coding: utf-8

"""
    Livepeer AI Runner

    An application to run AI pipelines

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class TextToImageParams(BaseModel):
    """
    TextToImageParams
    """
    model_id: StrictStr = Field(...)
    prompt: StrictStr = Field(...)
    height: Optional[StrictInt] = None
    width: Optional[StrictInt] = None
    guidance_scale: Optional[Union[StrictFloat, StrictInt]] = 7.5
    negative_prompt: Optional[StrictStr] = ''
    seed: Optional[StrictInt] = None
    num_images_per_prompt: Optional[StrictInt] = 1
    __properties = ["model_id", "prompt", "height", "width", "guidance_scale", "negative_prompt", "seed", "num_images_per_prompt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextToImageParams:
        """Create an instance of TextToImageParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextToImageParams:
        """Create an instance of TextToImageParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextToImageParams.parse_obj(obj)

        _obj = TextToImageParams.parse_obj({
            "model_id": obj.get("model_id") if obj.get("model_id") is not None else '',
            "prompt": obj.get("prompt"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "guidance_scale": obj.get("guidance_scale") if obj.get("guidance_scale") is not None else 7.5,
            "negative_prompt": obj.get("negative_prompt") if obj.get("negative_prompt") is not None else '',
            "seed": obj.get("seed"),
            "num_images_per_prompt": obj.get("num_images_per_prompt") if obj.get("num_images_per_prompt") is not None else 1
        })
        return _obj


