# coding: utf-8

"""
    Livepeer AI Runner

    An application to run AI pipelines

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TextToImageParams(BaseModel):
    """
    TextToImageParams
    """ # noqa: E501
    model_id: StrictStr
    prompt: StrictStr
    height: Optional[StrictInt] = None
    width: Optional[StrictInt] = None
    guidance_scale: Optional[Union[StrictFloat, StrictInt]] = 7.5
    negative_prompt: Optional[StrictStr] = ''
    safety_check: Optional[StrictBool] = True
    seed: Optional[StrictInt] = None
    num_inference_steps: Optional[StrictInt] = 50
    num_images_per_prompt: Optional[StrictInt] = 1
    __properties: ClassVar[List[str]] = ["model_id", "prompt", "height", "width", "guidance_scale", "negative_prompt", "safety_check", "seed", "num_inference_steps", "num_images_per_prompt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextToImageParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextToImageParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_id": obj.get("model_id") if obj.get("model_id") is not None else '',
            "prompt": obj.get("prompt"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "guidance_scale": obj.get("guidance_scale") if obj.get("guidance_scale") is not None else 7.5,
            "negative_prompt": obj.get("negative_prompt") if obj.get("negative_prompt") is not None else '',
            "safety_check": obj.get("safety_check") if obj.get("safety_check") is not None else True,
            "seed": obj.get("seed"),
            "num_inference_steps": obj.get("num_inference_steps") if obj.get("num_inference_steps") is not None else 50,
            "num_images_per_prompt": obj.get("num_images_per_prompt") if obj.get("num_images_per_prompt") is not None else 1
        })
        return _obj


